# STP

STP is a constraint solver (or SMT solver) aimed at solving constraints of bitvectors and arrays. These types of constraints can be generated by program analysis  tools, theorem provers, automated bug finders, cryptographic attack tools, intelligent fuzzers, model checkers, and by many other applications.

Homepage:      http://stp.github.io/

Ubuntu PPA:    https://launchpad.net/~simple-theorem-prover/+archive/ubuntu/ppa/+packages

Documentation: https://github.com/stp/stp/wiki

[![Build Status](https://travis-ci.org/stp/stp.svg?branch=master)](https://travis-ci.org/stp/stp)

## Quick build&install:

Get all prerequisites:
```
$ sudo apt-get install cmake gcc g++ libboost-all-dev bison flex python perl
```

Get minisat:
```
$ git clone https://github.com/stp/minisat.git
$ cd minisat
$ mkdir build && cd build
$ cmake ..
$ make
$ sudo make install
```

Optionally, you can build and CryptoMiniSat4 and it will be autodetected during build. Get it from  https://github.com/msoos/cryptominisat

Get stp:
```
$ git clone https://github.com/stp/stp.git
$ cd stp
$ mkdir build && cd build
$ cmake ..
$ make
$ sudo make install
```

## Input format

The file based input formats that STP reads are the: CVC, SMT-LIB1, and SMT-LIB2 formats. The SMT-LIB2 format is the recommended file format, because it is parsed by all modern bitvector solvers. Only quantifier-free bitvectors and arrays are implemented from the SMTLibv2 format.

### Usage
```
stp myproblem.smt
```

## Architecture

The system performs word-level preprocessing followed by translation to SAT which is then solved by a SAT solver. In particular, we introduce several new heuristics for the preprocessing step, including abstraction-refinement in the context of arrays, a new bitvector linear arithmetic equation solver, and some interesting simplifications. These heuristics help us achieve several magnitudes of order performance over other tools, and also over straight-forward translation to SAT. STP has been heavily tested on thousands of examples sourced from various real-world applications such as program analysis and bug-finding tools like EXE, and equivalence checking tools and theorem-provers.


## Authors

* Vijay Ganesh
* Trevor Hansen

