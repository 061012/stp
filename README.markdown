[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Linux build](https://travis-ci.org/stp/stp.svg?branch=master)](https://travis-ci.org/stp/stp)
[![Windows build](https://ci.appveyor.com/api/projects/status/35983b7cnrg37whk?svg=true)](https://ci.appveyor.com/project/msoos/stp)
[![Coverity](https://scan.coverity.com/projects/861/badge.svg)](https://scan.coverity.com/projects/861)
[![Codacy Badge](https://api.codacy.com/project/badge/Grade/f043efa22ea64e9ba44fde0f3a4fb09f)](https://www.codacy.com/app/soos.mate/cryptominisat?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=msoos/cryptominisat&amp;utm_campaign=Badge_Grade)
[![Coverage](https://coveralls.io/repos/stp/stp/badge.svg?branch=master&service=github)](https://coveralls.io/github/stp/stp?branch=master)

# STP

STP is a constraint solver (or SMT solver) aimed at solving constraints of bitvectors and arrays. These types of constraints can be generated by program analysis  tools, theorem provers, automated bug finders, cryptographic attack tools, intelligent fuzzers, model checkers, and by many other applications.

Homepage:      http://stp.github.io/
Ubuntu PPA:    https://launchpad.net/~simple-theorem-prover/+archive/ubuntu/ppa/+packages
Docker image:  docker pull msoos/stp


## Build, install and test:

For a quick install:

```
sudo apt-get install cmake bison flex libboost-all-dev python perl minisat
git clone https://github.com/stp/stp
cd stp
mkdir build
cd build
cmake ..
make
sudo make install
```

For more detailed instructions, see towards the end of the page.


## Input format

The file based input formats that STP reads are the: CVC, SMT-LIB1, and SMT-LIB2 formats. The SMT-LIB2 format is the recommended file format, because it is parsed by all modern bitvector solvers. Only quantifier-free bitvectors and arrays are implemented from the SMTLibv2 format.

### Usage

Run with an SMTLibv2 file:
```
stp myproblem.smt
```

Overflowing a 32b integer using the python interface:
```
import stp
In [1]: import stp
In [2]: a = stp.Solver()
In [3]: x = a.bitvec('x')
In [4]: y = a.bitvec('y')
In [5]: a.add(x + y < 20)
In [6]: a.add(x  > 10)
In [7]: a.add(y  > 10)
In [8]: a.check()
Out[8]: True
In [9]: a.model()
Out[9]: {'x': 4294967287L, 'y': 11L}
```

With Docker:
```
docker pull msoos/stp
echo "(set-logic QF_BV)
(set-info :smt-lib-version 2.0)
(assert (= (bvsdiv (_ bv3 2) (_ bv2 2)) (_ bv0 2)))
(check-sat)
(exit)" | docker run --rm -i -a stdin -a stdout stp
```

## Architecture

The system performs word-level preprocessing followed by translation to SAT which is then solved by a SAT solver. In particular, we introduce several new heuristics for the preprocessing step, including abstraction-refinement in the context of arrays, a new bitvector linear arithmetic equation solver, and some interesting simplifications. These heuristics help us achieve several magnitudes of order performance over other tools, and also over straight-forward translation to SAT. STP has been heavily tested on thousands of examples sourced from various real-world applications such as program analysis and bug-finding tools like EXE, and equivalence checking tools and theorem-provers.


# Detailed Building and Installation

STP is built with [CMake](http://cmake.org/), version 3.0.2 or newer. CMake is a
meta build system that generates build files for other tools such as
make(1), Visual Studio, Xcode, etc.

## Configuration variables
Here are a few interesting configuration variables. These apply to all
generators.

- ``CMAKE_BUILD_TYPE`` - The build type (e.g. Release)
- ``CMAKE_INSTALL_PREFIX`` - The prefix for install (e.g. /usr/local )
- ``ENABLE_ASSERTIONS`` - If TRUE STP will be built with asserts.
- ``ENABLE_TESTING`` - Enable running tests
- ``ENABLE_PYTHON_INTERFACE`` - Enable building the Python interface
- ``PYTHON_EXECUTABLE`` - Set python executable in case you have more than one python installed
- ``SANITIZE`` - Use Clang's sanitization checks
- ``STATICCOMPILE`` - Build static libraries and binaries instead of dynamic

## Dependencies
STP relies on : boost, flex, bison and minisat. You can install these by:

```
$ sudo apt-get install cmake bison flex libboost-all-dev python perl minisat
```

### CryptoMiniSat

STP uses minisat as its SAT solver by default but it also supports other SAT solvers including CryptoMiniSat as an optional extra. If installed, it will be detected during the cmake and used:

```
$ git clone https://github.com/msoos/cryptominisat
$ cd cryptominisat
$ mkdir build && cd build
$ cmake ..
$ make
$ sudo make install
$ sudo ldconfig
```

## Building a static library and binary

```
$ mkdir build && cd build
$ cmake -DSTATICCOMPILE=ON ..
$ make
$ sudo make install
$ sudo ldconfig
```

## Testing

Testing depends on GoogleTest, lit  and Outputcheck:

```
$ git submodule init
$ git submodule update
$ pip install lit
```

## Configuration and build options
```

To tweak the build configuration:

* Run ``cmake-gui /path/to/stp/source/root`` instead of ``cmake``. This
  user interface lets you control the value of various configuration
  variables and lets you pick the build system generator.

* Run ``ccmake`` instead of ``cmake``. This provides an ncurses terminal
  interface for changing configuration variables.

* Pass ``-D<VARIABLE>=<VALUE>`` options to ``cmake`` (not very user friendly).
  It is probably best if you **only** configure this way if you are writing
  scripts.

You can also tweak configuration later by running `make edit_cache` and edit any configuration variables, reconfigure and then regenerate the build system. After configuration, build by running `make`.

You can use the `-j<n>` flag to significantly to decrease build time by running `<n>` jobs in parallel (e.g. `make -j4`).

## Testing

```
#we are in the source directory
mkdir build
cd build
cmake -DENABLE_TESTING=ON ..
make
make check
```

## Installing

To install run `make install` and to uninstall run `make uninstall`. The root of installation is controlled by the `CMAKE_INSTALL_PREFIX` variable at configure time. You can change this by running `make edit_cache` and editing the value of `CMAKE_INSTALL_PREFIX`.


## Building on Visual Studio

Let's assume you put STP's source into c:\projects\stp and you have cygwin and
git installed. Get zlib:

```
cd C:\projects\stp
git clone https://github.com/madler/zlib
cd zlib
git checkout v1.2.8
echo %cd%
mkdir build
mkdir myinstall
cd build
cmake -G %"Visual Studio 14 2015 Win64"% -DCMAKE_INSTALL_PREFIX=%ZLIB_ROOT% ..
cmake --build . --config %CONFIGURATION%
cmake --build . --config %CONFIGURATION% --target install
dir ..\myinstall\
```

Get minisat:

```
cd C:\projects\stp
git clone https://github.com/msoos/minisat
cd minisat
echo %cd%
mkdir build
mkdir myinstall
cd build
cmake -G %"Visual Studio 14 2015 Win64"% -DCMAKE_INSTALL_PREFIX=%MINISAT_ROOT% -DZLIB_ROOT=%ZLIB_ROOT% ..
cmake --build . --config %CONFIGURATION%
cmake --build . --config %CONFIGURATION% --target install
dir ..\myinstall\
dir ..\myinstall\lib\
dir ..\myinstall\bin\
dir ..\myinstall\include\
```


Get flex, bison, perl:

```
C:\cygwin64\setup-x86_64.exe  -qnNd -R C:/cygwin64 -s http://cygwin.mirror.constant.com -l C:/cygwin64/var/cache/setup --packages "flex,bison,perl"
```

Finally, Build STP:

```
cd c:\projects\stp
git submodule update --init --recursive
mkdir ..\stp.build
cd ..\stp.build
cmake --version
cmake -G %"Visual Studio 14 2015 Win64"% -DBoost_USE_STATIC_LIBS=ON -DENABLE_TESTING=ON -DPYTHON_EXECUTABLE="%PYTHON%\\python.exe" -DPYTHON_LIB_INSTALL_DIR="%PYTHON%" -DLIT_TOOL="%PYTHON%\\Scripts\\lit.exe" -DMINISAT_LIBDIR=%MINISAT_ROOT% -DMINISAT_INCLUDE_DIRS=%MINISAT_ROOT%\include -DZLIB_ROOT=%ZLIB_ROOT% -DCMAKE_PREFIX_PATH=C:\cygwin64 ..\stp
cmake --build . --config %CONFIGURATION%
cmake --build . --config %CONFIGURATION% --target install
```



# Authors

* Vijay Ganesh
* Trevor Hansen

